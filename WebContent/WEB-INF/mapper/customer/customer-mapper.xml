<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	<entry key="checkId">
        SELECT
               COUNT(USER_CODE)
          FROM USER
	     WHERE USER_PHONE = ?
	</entry>
	
	<entry key="insertNewUser">
		INSERT 
		  INTO USER
             ( 
               USER_PHONE
             , USER_PWD
             , USER_NAME
             , USER_BDAY
             , USER_GENDER
             , USER_ADDRESS 
             , USER_REGISTER_DATE
             )
        VALUES
             (
               ?
             , ?
             , ?
             , ?
             , ?
             , ?
             , NOW()
             )
	</entry>
	
	
	<entry key ="insertNewResume">
	    INSERT
	      INTO RESUME
	         (
	           RESUME_WRITE_DATE
	         , USER_CODE
	         )
	    VALUES
	         (
	           NOW()
	         , LAST_INSERT_ID()
	         )
	</entry>
	
	<entry key="selectBlockEncryptedPwd">
		SELECT
		       A.USER_PWD
		     , A.USER_BLOCK
		  FROM USER A
		 WHERE A.USER_PHONE = ?
	</entry>
	
	<entry key="selectLoginUser">
		SELECT
		       A.USER_CODE
		     , A.USER_NAME
		     , A.USER_PHONE
		     , A.USER_PWD
		     , A.USER_BDAY
		     , A.USER_GENDER
		     , A.USER_ADDRESS
		     , A.USER_REGISTER_DATE
		     , A.USER_BLOCK
		  FROM USER A
		 WHERE A.USER_PHONE = ?	
	</entry>
	
	<!-- 상세검색에서 업종명으로 직종명을 검색해오는 쿼리 -->
	<entry key="selectJobByIndustry">
		SELECT
		       JOB.JOB_CODE
		     , JOB.JOB_NAME
		  FROM JOB
		  JOIN INDUSTRY ON INDUSTRY.INDUSTRY_CODE = JOB.INDUSTRY_CODE
		 WHERE JOB.INDUSTRY_CODE = ?		       
	</entry>
	

	<!-- 입사지원관리 조회해오는 쿼리 -->
	<entry key="selectApply">
		SELECT
	           A.APPLY_CODE 
		     , A.APPLY_DATE
		     , B.B_NAME
		     , P.POST_TITLE
		     , A.APPLY_CANCEL
		     , A.APPLY_READ
		  FROM APPLY A
	 LEFT JOIN RESUME R
	        ON A.RESUME_CODE = R.RESUME_CODE
	 LEFT JOIN USER U
	        ON R.USER_CODE = U.USER_CODE
	 LEFT JOIN POST P
	        ON A.POST_CODE = P.POST_CODE
	 LEFT JOIN HR H
	        ON P.HR_ID = H.HR_ID
	 LEFT JOIN BUSINESS B
	        ON H.B_CODE = B.B_CODE
	     WHERE U.USER_CODE = ?
	       AND A.APPLY_CANCEL = 0
	    ORDER BY A.APPLY_DATE DESC
	    LIMIT ?,?                         	  
		 
	</entry>
	
	<!-- 지원취소 업데이트 해주는 쿼리 -->
	<entry key = "cancelApply">
	    UPDATE APPLY
	       SET APPLY_CANCEL = 1
	     WHERE APPLY_CODE = ?
	</entry>
	
	<!-- 신고내역관리 조회해오는 쿼리 -->
	<entry key="selectReport">
		SELECT 
	           R.REPORT_DATE
	         , P.POST_TITLE
	         , D.DECISION_CODE
	      FROM REPORT R
	 LEFT JOIN USER U
	        ON R.USER_CODE = U.USER_CODE
	 LEFT JOIN POST P 
	        ON R.POST_CODE = P.POST_CODE
	 LEFT JOIN DECISION_LIST D
	        ON R.D_LIST_CODE = D.D_LIST_CODE
	     WHERE U.USER_CODE = ?
	       AND D.D_LIST_TYPE_CODE = 2
	     ORDER BY R.REPORT_DATE DESC
	     LIMIT ?,? 
	</entry>

	<!-- 입사지원내역 총 개수 -->	
	<entry key="applySelectTotalCount">
         SELECT
		       COUNT(*)
		  FROM APPLY A
     LEFT JOIN RESUME R
	        ON A.RESUME_CODE = R.RESUME_CODE
	 LEFT JOIN USER U
	        ON R.USER_CODE = U.USER_CODE
	     WHERE U.USER_CODE = ? 
	       AND A.APPLY_CANCEL = 0
	</entry>
	
	<!-- 신고내역 총 개수 -->	
	<entry key="blockSelectTotalCount">
        SELECT 
	           COUNT(*)    
	      FROM REPORT R
	 LEFT JOIN USER U
	        ON R.USER_CODE = U.USER_CODE
	 LEFT JOIN POST P 
	        ON R.POST_CODE = P.POST_CODE
	 LEFT JOIN DECISION_LIST D
	        ON R.D_LIST_CODE = D.D_LIST_CODE
	     WHERE U.USER_CODE = ?
	       AND D.D_LIST_TYPE_CODE = 2
	</entry>
	


	<!-- resumeenter에 쓸 이력서 전체 내용 조회 -->
	<entry key="selectResumeInfo">
	    SELECT
               R.RESUME_CODE
             , U.USER_NAME
             , U.USER_PHONE
             , R.RESUME_SUBPHONE
             , U.USER_GENDER
             , U.USER_BDAY
             , U.USER_ADDRESS
             , R.RESUME_LETTER
             , R.RESUME_ADVANTAGE
             , D.DEGREE_CODE
             , E.EXP_CODE
             , R.RESUME_WRITE_DATE
          FROM RESUME R
     LEFT JOIN USER U on R.USER_CODE = U.USER_CODE
     LEFT JOIN DEGREE D on R.DEGREE_CODE = D.DEGREE_CODE
     LEFT JOIN EXP E on R.EXP_CODE = E.EXP_CODE
         where U.USER_CODE = ?
	</entry>
	
	<entry key = "updateResume">
	   UPDATE
              RESUME R
   INNER JOIN USER U ON R.USER_CODE = U.USER_CODE
		  SET
		      U.USER_PHONE = ?
		    , R.RESUME_SUBPHONE = ?
		    , U.USER_GENDER = ?
		    , U.USER_BDAY = ?
		    , U.USER_ADDRESS = ?
		    , R.RESUME_LETTER = ?
	        , R.RESUME_ADVANTAGE = ?
	        , R.DEGREE_CODE = ?
	        , R.EXP_CODE = ?
	        , R.RESUME_WRITE_DATE = NOW()
		WHERE R.USER_CODE = ?
	</entry>
	
	<!-- 업종광고공고 조회 -->
	<entry key = "selectInAdPost">
	    select
		       DL.D_LIST_TYPE_CODE
		     , DL.DECISION_CODE
		     , P.post_code
		     , P.post_title
		     , L.location_name
		     , L.LOCATION_CODE 
		     , I.industry_name
		     , I.industry_code
		     , J.job_name
		     , J.job_code
		     , P.payment
		     , F.PAY_CODE 
		     , F.pay_name
		     , P.benefit
		     , P.PERIOD_CODE 
		     , WP.PERIOD_NAME 
		     , PAP.AD_CODE 
		  from POST P
		  left join LOCATION L on P.LOCATION_CODE = L.LOCATION_CODE 
		  left join JOB J on P.JOB_CODE = J.JOB_CODE
		  left join INDUSTRY I on J.INDUSTRY_CODE = I.INDUSTRY_CODE  
		  left join PAY F on P.PAY_CODE = F.PAY_CODE 
		  left join WORK_PERIOD WP on P.PERIOD_CODE = WP.PERIOD_CODE
		  left join DECISION_LIST DL on P.D_LIST_CODE = DL.D_LIST_CODE 
		  left join POST_AD_PAYMENT PAP on P.POST_CODE = PAP.POST_CODE 
		 where DL.D_LIST_TYPE_CODE = 4
		   and DL.DECISION_CODE = 2
		   and PAP.AD_CODE IN (1, 2)
		   and P.post_date <![CDATA[ <= ]]> NOW()
		   and I.INDUSTRY_CODE = ?
	</entry>
	
	<!-- 직종광고공고 조회 -->
	<entry key = "selectJobAdPost">
 select
		       DL.D_LIST_TYPE_CODE
		     , DL.DECISION_CODE
		     , P.post_code
		     , P.post_title
		     , L.location_name
		     , L.LOCATION_CODE 
		     , I.industry_name
		     , I.industry_code
		     , J.job_name
		     , J.job_code
		     , P.payment
		     , F.PAY_CODE 
		     , F.pay_name
		     , P.benefit
		     , P.PERIOD_CODE 
		     , WP.PERIOD_NAME 
		     , PAP.AD_CODE 
		  from POST P
		  left join LOCATION L on P.location_code = L.LOCATION_CODE 
		  left join JOB J on P.JOB_CODE = J.JOB_CODE
		  left join INDUSTRY I on J.INDUSTRY_CODE = I.INDUSTRY_CODE  
		  left join PAY F on P.PAY_CODE = F.PAY_CODE 
		  left join WORK_PERIOD WP on P.PERIOD_CODE = WP.PERIOD_CODE
		  left join DECISION_LIST DL on P.D_LIST_CODE = DL.D_LIST_CODE 
		  left join POST_AD_PAYMENT PAP on P.POST_CODE = PAP.POST_CODE 
		 where DL.D_LIST_TYPE_CODE = 4
		   and DL.DECISION_CODE = 2
		   and PAP.AD_CODE IN (3, 4)
		   and P.post_date <![CDATA[ <= ]]> NOW()
		   and J.JOB_CODE = ?
	</entry>
		
	<!-- 인증번호 업데이트 해주는 쿼리 -->
	<entry key = "insertVerifiedNum">
	    UPDATE USER
	       SET VERIFIED_NUM = ?
	     WHERE USER_PHONE = ?
	</entry>
	
	<!-- 휴대폰번호 인증번호 조회 -->
	<entry key = "selectVerifiedNum">
	    SELECT 
	           VERIFIED_NUM
	      FROM USER
	     WHERE USER_PHONE = ?
	</entry>
	
	<!-- 비밀번호 업데이트 해주는 쿼리 -->
	<entry key = "updatePwd">
	    UPDATE USER
	       SET USER_PWD = ?
	     WHERE USER_PHONE = ?
	</entry>
	
	<!-- 공고 상세보기 쿼리문 -->
	<!-- 차단 여부에 대한 FILTERING CODE 넣기 -->
	<entry key="postContent">
        SELECT
		       POST.POST_CODE
		     , POST.POST_TITLE
		     , POST.POST_TO
		     , POST.POST_START
		     , POST.POST_END 
		     , POST.POST_ONLINE 
		     , POST.POST_DATE 
		     , POST.POST_ADDRESS 
		     , POST.POST_DAY
		     , POST.PAYMENT 
		     , POST.GENDER 
		     , POST.ADVANTAGE 
		     , POST.BENEFIT 
		     , POST.FULLTIME_YN 
		     , POST.POST_M_NAME 
		     , POST.POST_M_EMAIL 
		     , POST.POST_M_PHONE
		     , REPORT.REPORT_CODE
		     , DECISION_LIST.D_LIST_CODE
		     , D_LIST_TYPE.D_LIST_TARGET
		     , EXP.EXP_CODE
		     , EXP.EXP_NAME 
		     , JOB.JOB_CODE
		     , JOB.JOB_NAME 
		     , INDUSTRY.INDUSTRY_NAME 
		     , WORK_PERIOD.PERIOD_CODE
		     , WORK_PERIOD.PERIOD_NAME 
		     , WORK_HOUR.HOUR_CODE 
		     , WORK_HOUR.HOUR_NAME 
		     , LOCATION.LOCATION_CODE 
		     , LOCATION.LOCATION_NAME 
		     , PAY.PAY_CODE 
		     , PAY.PAY_NAME 
		     , AGE.AGE_CODE 
		     , AGE.AGE_NAME 
		     , HR.HR_NAME 
		     , HR.HR_PHONE
		     , BUSINESS.B_NAME 
		     , BUSINESS.B_OWNER 
		     , BUSINESS.B_ADDRESS
		     , BUSINESS.B_PROFIT
		     , DEGREE.DEGREE_CODE 
		     , DEGREE.DEGREE_LEVEL
  		  FROM POST 
     LEFT JOIN REPORT ON (POST.POST_CODE = REPORT.POST_CODE)
     LEFT JOIN DECISION_LIST ON (REPORT.D_LIST_CODE = DECISION_LIST.DECISION_CODE)
     LEFT JOIN DECISION ON (DECISION_LIST.DECISION_CODE = DECISION.DECISION_CODE)
     LEFT JOIN D_LIST_TYPE ON (DECISION_LIST.D_LIST_TYPE_CODE = D_LIST_TYPE.D_LIST_TYPE_CODE)
     LEFT JOIN EXP ON (POST.EXP_CODE = EXP.EXP_CODE)
     LEFT JOIN JOB ON (POST.JOB_CODE = JOB.JOB_CODE)
     LEFT JOIN INDUSTRY ON (JOB.INDUSTRY_CODE = INDUSTRY.INDUSTRY_CODE)
     LEFT JOIN WORK_PERIOD ON (POST.PERIOD_CODE = WORK_PERIOD.PERIOD_CODE)
     LEFT JOIN WORK_HOUR ON (POST.HOUR_CODE = WORK_HOUR.HOUR_CODE)
     LEFT JOIN LOCATION ON (POST.LOCATION_CODE = LOCATION.LOCATION_CODE)
     LEFT JOIN PAY ON (POST.PAY_CODE = PAY.PAY_CODE)
     LEFT JOIN AGE ON (POST.AGE_CODE = AGE.AGE_CODE)
     LEFT JOIN HR ON (POST.HR_ID = HR.HR_ID)
     LEFT JOIN BUSINESS ON (HR.B_CODE = BUSINESS.B_CODE)
     LEFT JOIN DEGREE ON (POST.DEGREE_CODE = DEGREE.DEGREE_CODE)
         WHERE POST.POST_CODE = ?
	</entry>
	
	<!-- 유저 코드로 이력서 코드 조회 -->
	<entry key="selectResumeCode">
		SELECT
		       RESUME_CODE
		  FROM RESUME
		 WHERE USER_CODE = ?
	</entry>
	
	<!-- 공고 지원(APPLY) 쿼리 -->
	<entry key="insertApply">
		INSERT
 		  INTO APPLY 
        (
		  APPLY_DATE
		, APPLY_YN
		, APPLY_READ
		, APPLY_CANCEL
		, RESUME_CODE
		, POST_CODE
		)
		 VALUES
		(
		  NOW()
		, '미분류'
		, 0
		, 0
		, (SELECT RESUME_CODE
  	 		 FROM RESUME
 			WHERE USER_CODE = ?)
		, ? 
		)
	</entry>
	
	<!-- 암호화된 비밀번호 조회 -->
	<entry key="selectEncryptedPwd">
        SELECT
               USER_PWD
          FROM USER
         WHERE USER_BLOCK = 0
           AND USER_PHONE = ?
	</entry>
   	<entry key="insertPostReport">
       INSERT
         INTO REPORT
      (
        REPORT_REASON
      , REPORT_DATE 
      , POST_CODE 
      , USER_CODE 
      , D_LIST_CODE 
      )
      VALUES
      (
        ?
      , NOW()
      , ?
      , (SELECT USER.USER_CODE FROM USER WHERE USER_CODE = ?)
      , LAST_INSERT_ID() 
      )
   	</entry>	
	<entry key="insertDefaultDecisionList">
       INSERT
         INTO DECISION_LIST 
       (
         D_LIST_REASON
       , D_LIST_DATE
       , ADMIN_ID
       , DECISION_CODE
       , D_LIST_TYPE_CODE
       )
       VALUES
      (
        NULL
      , NULL
      , NULL
      , 1
      , ?
      )
   </entry>
	
</properties>